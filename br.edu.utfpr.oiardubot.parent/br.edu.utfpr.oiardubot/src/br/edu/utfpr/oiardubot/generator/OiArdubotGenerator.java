/*
 * generated by Xtext 2.25.0
 */
package br.edu.utfpr.oiardubot.generator;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import br.edu.utfpr.oiardubot.oiArdubot.Constante;
import br.edu.utfpr.oiardubot.oiArdubot.ConstanteVariavel;
import br.edu.utfpr.oiardubot.oiArdubot.Desligar;
import br.edu.utfpr.oiardubot.oiArdubot.Escrever;
import br.edu.utfpr.oiardubot.oiArdubot.Espera;
import br.edu.utfpr.oiardubot.oiArdubot.ExistenteVariavelRecebe;
import br.edu.utfpr.oiardubot.oiArdubot.Implementacao;
import br.edu.utfpr.oiardubot.oiArdubot.Inteiro;
import br.edu.utfpr.oiardubot.oiArdubot.LerAnalogica;
import br.edu.utfpr.oiardubot.oiArdubot.LerDigital;
import br.edu.utfpr.oiardubot.oiArdubot.Ligar;
import br.edu.utfpr.oiardubot.oiArdubot.Nome;
import br.edu.utfpr.oiardubot.oiArdubot.NovaVariavelRecebe;
import br.edu.utfpr.oiardubot.oiArdubot.Para;
import br.edu.utfpr.oiardubot.oiArdubot.Porta;
import br.edu.utfpr.oiardubot.oiArdubot.PortaAnalogica;
import br.edu.utfpr.oiardubot.oiArdubot.PortaDigital;
import br.edu.utfpr.oiardubot.oiArdubot.ReceberValor;
import br.edu.utfpr.oiardubot.oiArdubot.Variavel;
import br.edu.utfpr.oiardubot.oiArdubot.VariavelExistente;
import br.edu.utfpr.oiardubot.oiArdubot.VariavelNome;
import br.edu.utfpr.oiardubot.oiArdubot.Senao;
import br.edu.utfpr.oiardubot.oiArdubot.Texto;
import br.edu.utfpr.oiardubot.oiArdubot.TipoPorta;
import br.edu.utfpr.oiardubot.oiArdubot.Se;
import br.edu.utfpr.oiardubot.oiArdubot.Fimse;
import br.edu.utfpr.oiardubot.oiArdubot.FuncaoLerAnalogica;
import br.edu.utfpr.oiardubot.oiArdubot.FuncaoLerDigital;
import br.edu.utfpr.oiardubot.oiArdubot.FimPara;

public class OiArdubotGenerator extends AbstractGenerator {

	public static StringConcatenation builder = new StringConcatenation();
	public static StringConcatenation builder_variables = new StringConcatenation();
	public static StringConcatenation builder_setup = new StringConcatenation();
	public static StringConcatenation builder_code = new StringConcatenation();
	public static List<String> variablesSetup = new ArrayList<String>();
	public static Implementacao code;
	public static TreeIterator<EObject> iter;
	public static boolean intern = false;
	public static String tab = "\t";
	public static int setup = 0;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		iter = resource.getAllContents();
// builder.append("#include <ArduinoRobot.h>\n" + "\n");
		int loop = 0;
		boolean loopExist = false;
		boolean var = false;
		while (iter.hasNext()) {
			EObject e = iter.next();
			setup++;
			if (e instanceof Variavel) {
				var = true;
				Variavel entity = (Variavel) e;
				String tipo = entity.getVariavelNome().getTipo().toString();
				String tipoIno = tipo == "Texto" ? "String" : "int";
				builder_variables.append(tipoIno);
				builder_variables.append(" ");
				builder_variables.append(entity.getVariavelNome().getName().toString());
				builder_variables.append(" = ");
				String valor = entity.getValor();
				valor = valor == null ? "NULL" : valor;
				builder_variables.append(valor + ';');
				builder_variables.newLineIfNotEmpty();
			}
			if (e instanceof Constante) {
				var = true;
				Constante entity = (Constante) e;
				ConstanteVariavel variavel = entity.getVariavel();
				String tipo = variavel.getTipo().toString();
				String nome = variavel.getVariavelNome().toString();
				String valor = variavel.getValor().toString();
				String tipoIno = tipo == "Texto" ? "String" : "int";
				builder_variables.append("const " + tipoIno + " " + nome + " = " + valor + ";");
				builder_variables.newLineIfNotEmpty();
			}
			if (loop == 0 && (var == true || setup >= 1) && (e instanceof Implementacao)) {
				if (var == true)
					builder_setup.append("\n");
				builder_setup.append("void setup() {" + "\n\tSerial.begin(9600);\n");
				builder.append("\n\n" + "void loop() {\n\n");
				loopExist = true;
				loop++;
			}

			if (e instanceof Implementacao) {
				code = (Implementacao) e;
				implement(code);
			}
			if (e instanceof Senao) {
				builder.append(tab + "}else{\n");
// Senao senao = (Senao) e;
// List<Implementacao> codes = senao.getCode();
// implementIntern(codes);
			}
			if (e instanceof Fimse) {
				builder.append(tab + "}\n");
				tab = "\t";
				intern = false;
			}
			if (e instanceof FimPara) {
				builder.append(tab + "}\n");
				tab = "\t";
				intern = false;
			}
// if (e instanceof Ligar) {
//// Ligar ligarCode = (Ligar) code;
//// builder.append("\n\n" + codeParam);
// ligar((Ligar) e);
// code = null;
//// builder.append("\n\n->" + codeParam);
// }
// if (e instanceof Desligar) {
//// Ligar ligarCode = (Ligar) code;
//// builder.append("\n\n" + codeParam);
// desligar((Desligar) e);
// code = null;
//// builder.append("\n\n->" + codeParam);
// }
		}
		if (!loopExist) {
			builder.append("\n" + "void loop() {\n");
			loopExist = true;
		}
// builder.append("\nvoid setup() {" + "\n\tSerial.begin(9600);\n" + "}\n");
		builder_setup.append("}");
		builder.append("\n}");
		builder_code.append(builder_variables);
		builder_code.append(builder_setup);
		builder_code.append(builder);
		fsa.generateFile("tinkercad.ino", builder_code);
	}

	public void implement(Implementacao codeParam) {
		if (codeParam instanceof Se) {
			if (intern == true)
				tab = "\t\t";
			else
				intern = true;
			Se seCode = (Se) codeParam;
			String valorEsqueda = seCode.getValorEsquerda().toString();
			String relacao = seCode.getRelacao().getRelation().toString();
			Senao seNao = seCode.getSenao();
			String valorDireita = seCode.getValorDireita().toString();

			Senao senao = (Senao) seCode.getSenao();
			if (relacao.equalsIgnoreCase("="))
				relacao = "==";
			builder.append(tab + "if (" + valorEsqueda + ' ' + relacao + ' ' + valorDireita + "){\n");
// builder.append(seCode.getCode().size() < 1 ? "\n\t}" : (seCode.getCode().toString() + "\n\t}"));
// List<Implementacao> codes = seCode.getCode();
//// implementIntern(codes);
//// builder.append("\t}");
// for (int i = 0; i < codes.size(); i++) {
//// if (codes.get(i) instanceof Ligar) {
//// ligar((Ligar) codes.get(i));
//// }
//// if (codeIntern.get(i) instanceof Desligar) {
//// desligar((Desligar) codeIntern.get(i));
//// }
// implement(codes.get(i));
// }
//
// if (senao != null) {
// builder.append("else{\n");
// List<Implementacao> codesSenao = senao.getCode();
// implementIntern(codesSenao);
// builder.append("\t}\n");
// } else {
// intern = false;
// }
//
// code = null;
		} else if (codeParam instanceof VariavelExistente) {
			VariavelExistente varExistente = (VariavelExistente) codeParam;
			ExistenteVariavelRecebe valorEsquerda = varExistente.getAtribuicao();
			String nomeVar = tab;
			String onlyName = "";
			onlyName = valorEsquerda.getName().toString();
			nomeVar += onlyName + " = ";
			String valor = varExistente.getValor();
			valor = valor == null ? "NULL" : valor;
			nomeVar += valor + ";";
			builder.append(nomeVar);
			builder.newLineIfNotEmpty();

		} else if (codeParam instanceof Escrever) {
			if (intern == true)
				builder.append(tab);

			Escrever escrever = (Escrever) codeParam;
			if (escrever.getMensagem() instanceof Nome) {
				Nome nome = (Nome) escrever.getMensagem();
				String mensagem = nome.getName().toString();
				builder.append(tab + "Serial.print(" + mensagem + ");\n");
			} else if (escrever.getMensagem() instanceof Texto) {
				Texto nome = (Texto) escrever.getMensagem();
				String mensagem = nome.getName().toString();
				builder.append(tab + "Serial.print(\"" + mensagem + "\");\n");
			} else {
				Inteiro nome = (Inteiro) escrever.getMensagem();
				builder.append(tab + "Serial.print(" + nome.getName() + ");\n");
			}

		} else if (codeParam instanceof Para) {
			if (intern == true)
				tab = "\t\t";
			else
				intern = true;
			Para para = (Para) codeParam;
			String var = para.getVariavel();
			int ate = para.getAte();
			String paraCode = "for(int " + var + "; " + var + "<= " + String.valueOf(ate) + "; " + var + "++){\n";
			builder.append(tab + paraCode);
		}
// else if (codeParam instanceof Ler) {
// Ler ler = (Ler) codeParam;
// ReceberValor valorEsquerda = ler.getAtribuicao();
// String nomeVar;
// if (valorEsquerda.getTipo() instanceof ExistenteVariavelRecebe) {
// ExistenteVariavelRecebe var = (ExistenteVariavelRecebe) valorEsquerda.getTipo();
// nomeVar = "\t" + var.getName().toString() + " = ";
// } else {
// NovaVariavelRecebe var = (NovaVariavelRecebe) valorEsquerda.getTipo();
// VariavelNome varName = (VariavelNome) var;
// nomeVar = varName.getTipo().toString().equalsIgnoreCase("Texto") ? "String" : "int";
// nomeVar += " " + varName.getName().toString() + " = ";
// }
//
// FuncaoLer fl = (FuncaoLer) ler.getLer();
// TipoPorta tp = (TipoPorta) fl.getTipoPorta();
// Porta p = (Porta) fl.getPorta();
// String valorFunc;
// if (p instanceof PortaAnalogica) {
// PortaAnalogica pa = (PortaAnalogica) p.getName();
// valorFunc = pa.getValor();
// } else {
// PortaDigital pd = (PortaDigital) p.getName();
// valorFunc = pd.getValor();
// }
// if (tp.toString().equalsIgnoreCase("ANALOGICA")) {
// nomeVar += "analogRead(" + valorFunc + ");";
//
// } else if (tp.toString().equalsIgnoreCase("DIGITAL")) {
// nomeVar += "digitalRead(" + valorFunc + ");";
// }
// builder.append(nomeVar);
// }
		else if (codeParam instanceof LerDigital) {
			LerDigital ler = (LerDigital) codeParam;
			ReceberValor valorEsquerda = ler.getAtribuicao();
			String nomeVar = tab;
			String onlyName = "";
			if (valorEsquerda.getTipo() instanceof ExistenteVariavelRecebe) {
				ExistenteVariavelRecebe var = (ExistenteVariavelRecebe) valorEsquerda.getTipo();
				onlyName = var.getName().toString();
				nomeVar += onlyName + " = ";
			} else {
				NovaVariavelRecebe var = (NovaVariavelRecebe) valorEsquerda.getTipo();
				VariavelNome varName = (VariavelNome) var;
				nomeVar += varName.getTipo().toString().equalsIgnoreCase("Texto") ? "String" : "int";
				onlyName = varName.getName().toString();
				nomeVar += " " + onlyName + " = ";
			}

			FuncaoLerDigital fl = (FuncaoLerDigital) ler.getLer();
			Porta p = (Porta) fl.getPorta();
			String valorFunc;
			if (p instanceof PortaAnalogica) {
				PortaAnalogica pa = (PortaAnalogica) p.getName();
				valorFunc = pa.getValor();
			} else {
				PortaDigital pd = (PortaDigital) p.getName();
				valorFunc = pd.getValor();
			}
			nomeVar += "digitalRead(" + valorFunc + ");";
			builder.append(nomeVar + "\n");
			if (!(variablesSetup.contains(onlyName))) {
				variablesSetup.add(onlyName);
				builder_setup.append("\tpinMode(" + onlyName + ", INPUT);\n");
			}

		} else if (codeParam instanceof LerAnalogica) {
			LerAnalogica ler = (LerAnalogica) codeParam;
			ReceberValor valorEsquerda = ler.getAtribuicao();
			String nomeVar = tab;
			String onlyName = "";
			if (valorEsquerda.getTipo() instanceof ExistenteVariavelRecebe) {
				ExistenteVariavelRecebe var = (ExistenteVariavelRecebe) valorEsquerda.getTipo();
				onlyName = var.getName().toString();
				nomeVar += onlyName + " = ";
			} else {
				NovaVariavelRecebe var = (NovaVariavelRecebe) valorEsquerda.getTipo();
				VariavelNome varName = (VariavelNome) var;
				nomeVar += varName.getTipo().toString().equalsIgnoreCase("Texto") ? "String" : "int";
				onlyName = varName.getName().toString();
				nomeVar += " " + onlyName + " = ";
			}

			FuncaoLerAnalogica fl = (FuncaoLerAnalogica) ler.getLer();
			Porta p = (Porta) fl.getPorta();
			String valorFunc;
			if (p instanceof PortaAnalogica) {
				PortaAnalogica pa = (PortaAnalogica) p.getName();
				valorFunc = pa.getValor();
			} else {
				PortaDigital pd = (PortaDigital) p.getName();
				valorFunc = pd.getValor();
			}
			nomeVar += "analogRead(" + valorFunc + ");";
			builder.append(nomeVar + "\n");
			if (!(variablesSetup.contains(onlyName))) {
				variablesSetup.add(onlyName);
				builder_setup.append("\tpinMode(" + onlyName + ", INPUT);\n");
			}
		} else if (codeParam instanceof Ligar) {
// Ligar ligarCode = (Ligar) code;
// builder.append("\n\n" + codeParam);
			ligar((Ligar) codeParam);
			code = null;
// builder.append("\n\n->" + codeParam);
		} else if (codeParam instanceof Desligar) {
// Ligar ligarCode = (Ligar) code;
// builder.append("\n\n" + codeParam);
			desligar((Desligar) codeParam);
			code = null;
// builder.append("\n\n->" + codeParam);
		} else if (codeParam instanceof Espera) {
			Espera delay = (Espera) codeParam;
			String valor = String.valueOf(delay.getValor());
			if (intern == true)
				builder.append(tab);
			builder.append(tab + "delay(" + valor + ");\n");
			code = null;
		}
// else if (codeParam instanceof Ligar) {
//// Ligar ligarCode = (Ligar) code;
//// builder.append("\n\n" + codeParam);
// ligar((Ligar) codeParam);
// code = null;
//// builder.append("\n\n->" + codeParam);
// }

	}

	public void implementIntern(List<Implementacao> codeIntern) {
		for (int i = 0; i < codeIntern.size(); i++) {
			if (codeIntern.get(i) instanceof Ligar) {
				ligar((Ligar) codeIntern.get(0));
			}
			if (codeIntern.get(i) instanceof Desligar) {
				desligar((Desligar) codeIntern.get(i));
			}
		}
	}

	public void ligar(Ligar content) {
// Ligar ligarCode = (Ligar) codeIntern.get(0);
		TipoPorta tipo = content.getTipoPorta();
		Porta porta = content.getPorta();
		String onlyName = "";
		if (tipo.toString().equalsIgnoreCase("ANALOGICA")) {
			PortaAnalogica pa = (PortaAnalogica) porta.getName();
			if (intern == true)
				builder.append(tab);

			onlyName = pa.getValor();
			builder.append(tab + "analogWrite (" + onlyName + ", HIGH);");
		} else if (tipo.toString().equalsIgnoreCase("DIGITAL")) {
			PortaDigital pd = (PortaDigital) porta.getName();
			if (intern == true)
				builder.append(tab);

			onlyName = pd.getValor();
			builder.append(tab + "digitalWrite (" + onlyName + ", HIGH);");
		}
		builder.newLineIfNotEmpty();
		if (!(variablesSetup.contains(onlyName))) {
			variablesSetup.add(onlyName);
			builder_setup.append("\tpinMode(" + onlyName + ", OUTPUT);\n");
		}
	}

	public void desligar(Desligar content) {
// Ligar ligarCode = (Ligar) codeIntern.get(0);
		TipoPorta tipo = content.getTipoPorta();
		Porta porta = content.getPorta();
		String onlyName = "";
		if (tipo.toString().equalsIgnoreCase("ANALOGICA")) {
			PortaAnalogica pa = (PortaAnalogica) porta.getName();
			if (intern == true)
				builder.append(tab);

			onlyName = pa.getValor();
			builder.append(tab + "analogWrite (" + onlyName + ", LOW);");
		} else if (tipo.toString().equalsIgnoreCase("DIGITAL")) {
			PortaDigital pd = (PortaDigital) porta.getName();
			if (intern == true)
				builder.append(tab);

			onlyName = pd.getValor();
			builder.append(tab + "digitalWrite (" + onlyName + ", LOW);");
		}
		builder.newLineIfNotEmpty();
		if (!(variablesSetup.contains(onlyName))) {
			variablesSetup.add(onlyName);
			builder_setup.append("\tpinMode(" + onlyName + ", OUTPUT);\n");
		}
	}
}
