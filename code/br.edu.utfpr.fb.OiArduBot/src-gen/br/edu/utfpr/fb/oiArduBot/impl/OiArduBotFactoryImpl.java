/**
 * generated by Xtext 2.25.0
 */
package br.edu.utfpr.fb.oiArduBot.impl;

import br.edu.utfpr.fb.oiArduBot.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OiArduBotFactoryImpl extends EFactoryImpl implements OiArduBotFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OiArduBotFactory init()
  {
    try
    {
      OiArduBotFactory theOiArduBotFactory = (OiArduBotFactory)EPackage.Registry.INSTANCE.getEFactory(OiArduBotPackage.eNS_URI);
      if (theOiArduBotFactory != null)
      {
        return theOiArduBotFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OiArduBotFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OiArduBotFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OiArduBotPackage.MODEL: return createModel();
      case OiArduBotPackage.CODIGO: return createCodigo();
      case OiArduBotPackage.VARIAVEL: return createVariavel();
      case OiArduBotPackage.CONTROLE: return createControle();
      case OiArduBotPackage.PARA: return createPara();
      case OiArduBotPackage.SE: return createSe();
      case OiArduBotPackage.SENAO: return createSenao();
      case OiArduBotPackage.ROBO: return createRobo();
      case OiArduBotPackage.SENSORIAMENTO: return createSensoriamento();
      case OiArduBotPackage.ATUACAO: return createAtuacao();
      case OiArduBotPackage.NOTIFICACAO: return createNotificacao();
      case OiArduBotPackage.BEEP: return createBeep();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OiArduBotPackage.TIPO:
        return createTipoFromString(eDataType, initialValue);
      case OiArduBotPackage.TIPO_BEEP:
        return createTipoBeepFromString(eDataType, initialValue);
      case OiArduBotPackage.TIPO_PORTA:
        return createTipoPortaFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OiArduBotPackage.TIPO:
        return convertTipoToString(eDataType, instanceValue);
      case OiArduBotPackage.TIPO_BEEP:
        return convertTipoBeepToString(eDataType, instanceValue);
      case OiArduBotPackage.TIPO_PORTA:
        return convertTipoPortaToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Codigo createCodigo()
  {
    CodigoImpl codigo = new CodigoImpl();
    return codigo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variavel createVariavel()
  {
    VariavelImpl variavel = new VariavelImpl();
    return variavel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Controle createControle()
  {
    ControleImpl controle = new ControleImpl();
    return controle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Para createPara()
  {
    ParaImpl para = new ParaImpl();
    return para;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Se createSe()
  {
    SeImpl se = new SeImpl();
    return se;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Senao createSenao()
  {
    SenaoImpl senao = new SenaoImpl();
    return senao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robo createRobo()
  {
    RoboImpl robo = new RoboImpl();
    return robo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensoriamento createSensoriamento()
  {
    SensoriamentoImpl sensoriamento = new SensoriamentoImpl();
    return sensoriamento;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atuacao createAtuacao()
  {
    AtuacaoImpl atuacao = new AtuacaoImpl();
    return atuacao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Notificacao createNotificacao()
  {
    NotificacaoImpl notificacao = new NotificacaoImpl();
    return notificacao;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Beep createBeep()
  {
    BeepImpl beep = new BeepImpl();
    return beep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tipo createTipoFromString(EDataType eDataType, String initialValue)
  {
    Tipo result = Tipo.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoBeep createTipoBeepFromString(EDataType eDataType, String initialValue)
  {
    TipoBeep result = TipoBeep.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoBeepToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TipoPorta createTipoPortaFromString(EDataType eDataType, String initialValue)
  {
    TipoPorta result = TipoPorta.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoPortaToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OiArduBotPackage getOiArduBotPackage()
  {
    return (OiArduBotPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OiArduBotPackage getPackage()
  {
    return OiArduBotPackage.eINSTANCE;
  }

} //OiArduBotFactoryImpl
